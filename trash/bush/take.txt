public class fbPolyesterController {
    @Autowired
    private MaterialRepo MaterialRepoObj;

    private SignupRepo SignupRepoObj;

    private double max;
    private double min;

    @GetMapping("/euroSize/{eurosize}")
    public String geteuroSize(@PathVariable int eurosize) {
        switch (eurosize) {
            case 6:  
                return getRange(6); 
            case 8:
                return getRange(8); 
            case 10:
                return getRange(10);
            default:
                return "Invalid size category.";
        }
    }

    public String getRange(int eurosize) {
        List<Material> MaterialObj= MaterialRepoObj.findByEurosize(eurosize);

        if (!MaterialObj.isEmpty()) {
            min = MaterialObj.get(0).getbust(); 
            max = MaterialObj.get(0).getbust();
            for (Material bustobj :MaterialObj) {
                double bustsize = bustobj.getbust();
                if (bustsize < min) {
                    min = bustsize; //getting the min value
                }
                if (bustsize > max) {
                    max = bustsize;
                }
            }
            return "min is "+min+ ",max is " +max;
        } else {
            return "No data available for eurosize " + eurosize;
        }
    }

    @GetMapping("/fit/eurosize/{bustSignup}")
    public int getSize(@PathVariable int bustSignup) {
        Signup SignupObj= SignupRepoObj.findBybustwidth(bustSignup);
        if (bustSignup >= min && bustSignup<= max) {
            return getEuroSizeForBust(bustSignup);
        } else {
            return 0;
        }
    }

    public double getEuroSizeForBust(double bustSignup) {
    int[] euroSizes = {6, 8, 10}; // Add more sizes as needed
    for (int euroSize : euroSizes) {
        String range = getRange(euroSize);
        String[] minMax = range.split(",");
        double min = Double.parseDouble(minMax[0].split(" ")[2]);
        double max = Double.parseDouble(minMax[1].split(" ")[3]);
        if (bustSignup >= min && bustSignup <= max) {
            return euroSize;
        }
    }
    return 0; // Return 0 if no matching euro size is found
}
}